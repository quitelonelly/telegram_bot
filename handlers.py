from aiogram import types
from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from kb_bot import kb_reg, kb_profile, kb_delete_profile, kb_admin
from state.register import RegisterState 

from database.core import insert_data, select_user, delete_user, select_users

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    if user_id == 894963514:
        await message.answer(f"ü§©–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}!\n–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!ü§©\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Å–æ–±—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", reply_markup=kb_admin)
    else:
        await message.answer(f"ü§©–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É!ü§©", reply_markup=kb_reg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def cmd_help(message: types.Message):
    await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?üò≤ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å—é–¥–∞\n—Ç—É—Ç –±—É–¥–µ—Ç –Ω–æ–º–µ—Ä...üì±")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /desc
async def cmd_desc(message: types.Message):
    await message.answer(
         "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã. üíÖ\n\n"
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
            "üîπ –£–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö\n"
            "üîπ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è\n"
            "üîπ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–ø–∏—Å–∏\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
async def cmd_reg(message: types.Message, state: FSMContext):
    await message.answer("‚≠êÔ∏è–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!‚≠êÔ∏è\n–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    await state.set_state(RegisterState.regName)

async def register_name(message: types.Message, state: FSMContext):
    await message.answer(f"‚ò∫Ô∏è –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {message.text}!\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, " + 
                         "—á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏!\nüì± –§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö\n\n‚ö†Ô∏è " + 
                         "–í–Ω–∏–º–∞–Ω–∏–µ! –Ø —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É!")
    await state.update_data(regname=message.text)
    await state.set_state(RegisterState.regPhone)

async def register_phone(message: types.Message, state: FSMContext):
    if(re.findall(r"^\+[7][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$", message.text)):
        await state.update_data(regphone=message.text)
        reg_data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        reg_name = reg_data.get("regname")
        reg_phone = reg_data.get("regphone")
        reg_tgid = message.from_user.id
        
        result = insert_data(reg_name, reg_phone, reg_tgid)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer(result, reply_markup=kb_profile)
        await state.clear()
    else:
        await message.answer(f"üò° –ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")

async def get_profile(message: types.Message):
    tgid = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    result = select_user(tgid)
    await message.answer(result, reply_markup=kb_delete_profile)
    await message.answer("ü•≥–û—Ç–ª–∏—á–Ω–æ!\n\n–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –æ–∂–∏–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω—è!")
    
async def exit_profile(call: types.CallbackQuery):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    tgid = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    result = delete_user(tgid)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω", reply_markup=None)
    await call.answer(result, show_alert=True)
    
# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
# –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def get_clients(message: types.Message):
    result = select_users()
    
    await message.answer(result)
    
async def set_order(message: types.Message):
    # –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ (–Ω—É–∂–Ω–∞ –ë–î)
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def reg_handlers(dp: Dispatcher):
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, Command(commands=["start"]))
    dp.message.register(cmd_help, Command(commands=["help"]))
    dp.message.register(cmd_desc, Command(commands=["desc"]))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª—å
    dp.message.register(cmd_reg, F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    dp.message.register(register_name, RegisterState.regName)
    dp.message.register(register_phone, RegisterState.regPhone)
    dp.message.register(get_profile, F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
    dp.callback_query.register(exit_profile, F.data == 'exit')

    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    dp.message.register(get_clients, F.text == "–ö–ª–∏–µ–Ω—Ç—ã")
    