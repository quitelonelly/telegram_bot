# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import types
from aiogram import Dispatcher, F
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from database.config import settings

import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from kb_bot import kb_reg, kb_profile, kb_delete_profile, kb_admin
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
from state.register import RegisterState
from state.order import OrderState

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database.core import (
    insert_user, select_user_profile, delete_user, select_users, 
    create_kb, select_users_order, get_username_by_tgid, 
    get_userphone_by_tgid, insert_order, fetch_all_orders,
    delete_order_by_time,
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    admin_ids = settings.admin_ids
    if user_id in admin_ids:
        await message.answer(f"ü§©–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{message.from_user.full_name}</b>!\n–Ø –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!ü§©\n\n–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Å–æ–±—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", reply_markup=kb_admin, parse_mode="HTML")
    else:
        await message.answer(f"ü§©–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{message.from_user.full_name}</b>!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É!ü§©", reply_markup=kb_reg, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def cmd_help(message: types.Message):
    await message.answer("–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?üò≤ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å—é–¥–∞\n\nhttps://t.me/AnastasiyaG_1983 üì±")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /desc
async def cmd_desc(message: types.Message):
    await message.answer(
        "–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã. üíÖ\n\n"
            "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
            "üîπ –£–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö\n"
            "üîπ –í–∞—Å –∑–∞–ø–∏—à—É—Ç –Ω–∞ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è\n"
            "üîπ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∑–∞–ø–∏—Å–∏\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!"
    )
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /services
async def cmd_serv(message: types.Message):
    await message.answer(
        "üìã–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥:\n\n"
            "üíÖ–î–∏–∑–∞–π–Ω(1 –Ω–æ–≥–æ—Ç–æ–∫) ‚Äî 50-300üí∏\n"
            "–ú–∞–Ω–∏–∫—é—Ä + —É–∫—Ä–µ–ø–ª–µ–Ω–∏–µ + 1 —Ç–æ–Ω:\n–¥–ª–∏–Ω–∞ S ‚Äî 1400-1500üí∏\n"
                                                "–¥–ª–∏–Ω–∞ M ‚Äî 1500üí∏\n"
                                                "–¥–ª–∏–Ω–∞ L ‚Äî 1600üí∏\n"
            "______________________________________\n\n"
            "–ú–∞–Ω–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è ‚Äî 600üí∏\n"
            "______________________________________\n\n"
            "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ, –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:\n–¥–ª–∏–Ω–∞ S ‚Äî\n"
                                                "–¥–ª–∏–Ω–∞ M ‚Äî 2000üí∏\n"
                                                "–¥–ª–∏–Ω–∞ L ‚Äî 2500üí∏\n"
            "______________________________________\n\n"
            "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä:\n–¥–ª–∏–Ω–∞ S ‚Äî 1500üí∏\n"
                                                "–¥–ª–∏–Ω–∞ M ‚Äî 1600üí∏\n"
                                                "–¥–ª–∏–Ω–∞ L ‚Äî 1700üí∏\n"
            "______________________________________\n\n"
            "üë£–ü–µ–¥–∏–∫—é—Ä –ø–æ–ª–Ω—ã–π ‚Äî 2000üí∏\n"
            "–ü–µ–¥–∏–∫—é—Ä(–ø–∞–ª—å—á–∏–∫–∏/–ø–æ–∫—Ä—ã—Ç–∏–µ) ‚Äî 1700üí∏\n"
            "–ü–µ–¥–∏–∫—é—Ä(–ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è) ‚Äî 1700üí∏"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
async def cmd_reg(message: types.Message, state: FSMContext):
    await message.answer("‚≠êÔ∏è–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!‚≠êÔ∏è\n–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    await state.set_state(RegisterState.regName)

async def register_name(message: types.Message, state: FSMContext):
    await message.answer(f"‚ò∫Ô∏è –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {message.text}!\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, " + 
                         "—á—Ç–æ–±—ã –±—ã—Ç—å –Ω–∞ —Å–≤—è–∑–∏!\nüì± –§–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö\n\n‚ö†Ô∏è " + 
                         "–í–Ω–∏–º–∞–Ω–∏–µ! –Ø —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ñ–æ—Ä–º–∞—Ç—É!")
    await state.update_data(regname=message.text)
    await state.set_state(RegisterState.regPhone)

async def register_phone(message: types.Message, state: FSMContext):
    if(re.findall(r"^\+[7][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$", message.text)):
        await state.update_data(regphone=message.text)
        reg_data = await state.get_data()

        # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        reg_name = reg_data.get("regname")
        reg_phone = reg_data.get("regphone")
        reg_tgid = message.from_user.id
        
        result = insert_user(reg_name, reg_phone, reg_tgid)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer(result, reply_markup=kb_profile)
        await state.clear()
    else:
        await message.answer(f"üò° –ù–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")

# –§—É–∫–Ω—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –∏ –≤—ã–¥–∞–µ—Ç –µ–º—É –ø—Ä–æ—Ñ–∏–ª—å
async def get_profile(message: types.Message):
    tgid = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    result = select_user_profile(tgid)
    await message.answer(result, reply_markup=kb_delete_profile)
    await message.answer("‚úÖ–û—Ç–ª–∏—á–Ω–æ!\n\n–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –æ–∂–∏–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω—è!")
    
# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def exit_profile(call: types.CallbackQuery):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    tgid = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥
    result = delete_user(tgid)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω", reply_markup=None)
    await call.answer(result, show_alert=True)
    
# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
# –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async def get_clients(message: types.Message):
    result = select_users()
    
    await message.answer(result, parse_mode="html")
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å"
async def set_order(message: types.Message, state: FSMContext):
    users = select_users_order()
    keyboard = create_kb(users)
    
    await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É! –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=keyboard)
    await state.set_state(OrderState.ordName)

# –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
async def handle_client_selection(callback: types.CallbackQuery, state: FSMContext):
    selected_user_tgid = int(callback.data)
    selected_user_name = await get_username_by_tgid(selected_user_tgid)
    
    await state.update_data(selected_user_tgid=selected_user_tgid)
    
    confirmation_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞", callback_data="confirm"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel")
            ]
        ]
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    await callback.message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: <b>{selected_user_name}</b>?", reply_markup=confirmation_keyboard, parse_mode="html")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞
async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data

    if action == "confirm":
        state_data = await state.get_data()
        selected_user_tgid = state_data.get("selected_user_tgid")
        selected_user_name = await get_username_by_tgid(selected_user_tgid)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞
        await callback.message.answer(
            f"ü•≥–û—Ç–ª–∏—á–Ω–æ!\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞: <b>{selected_user_name}</b>üë©‚Äçü¶≥\n\n‚åöÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏.\n–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: DD.MM.YYYY HH:MM",
            parse_mode="html")
        await state.set_state(OrderState.ordTime)

    elif action == "cancel":
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await callback.answer("–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.", show_alert=True)

    await callback.message.delete()

# –§—É–∫–Ω—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É
async def register_order_time(message: types.Message, state: FSMContext):
    order_time = message.text
    state_data = await state.get_data()
    selected_user_tgid = state_data.get("selected_user_tgid")
    selected_user_name = await get_username_by_tgid(selected_user_tgid)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ TGID
    user_phone = await get_userphone_by_tgid(selected_user_tgid)

    # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    result = await insert_order(selected_user_name, user_phone, selected_user_tgid, order_time)

    await message.answer(result, parse_mode="HTML")
    await state.clear()
    
# –§—É–∫–Ω—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ 
async def get_orders(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    orders = fetch_all_orders()
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–≤–æ–¥–∏–º –∏—Ö
    if orders:
        await message.answer(orders, parse_mode="html")
    else:
        await message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
# –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å 
async def cmd_delete(message: types.Message, command: CommandObject):
    if message.from_user.id in settings.admin_ids:
        time = command.args.strip()
        if time:
            result = delete_order_by_time(time)
            await message.answer(result)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏. \n\n–ü—Ä–∏–º–µ—Ä: /delete 01.01.2024 12:00")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def reg_handlers(dp: Dispatcher):
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, Command(commands=["start"]))
    dp.message.register(cmd_help, Command(commands=["help"]))
    dp.message.register(cmd_desc, Command(commands=["desc"]))
    dp.message.register(cmd_serv, Command(commands=["services"]))
    dp.message.register(cmd_delete, Command(commands=["delete"]))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª—å
    dp.message.register(cmd_reg, F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    dp.message.register(register_name, RegisterState.regName)
    dp.message.register(register_phone, RegisterState.regPhone)
    dp.message.register(get_profile, F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
    dp.callback_query.register(exit_profile, F.data == 'exit')

    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    dp.message.register(get_clients, F.text == "–ö–ª–∏–µ–Ω—Ç—ã")
    dp.message.register(set_order, F.text == "–ó–∞–ø–∏—Å–∞—Ç—å")
    dp.message.register(get_orders, F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏")
    
    dp.callback_query.register(handle_client_selection, lambda c: c.data.isdigit())
    dp.callback_query.register(handle_confirmation, lambda c: c.data in ["confirm", "cancel"])
    dp.message.register(register_order_time, OrderState.ordTime)
    

    