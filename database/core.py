from sqlalchemy import text, insert, select, delete
from database.db import sync_engine
from database.models import metadata_obj, users_table
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def create_tables():
    metadata_obj.create_all(sync_engine)
    
def insert_data(name, phone, tgid):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    if check_user(phone):
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    with sync_engine.connect() as conn:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        stmt = insert(users_table).values(
            [
                {"username": name, "userphone": phone, "usertgid": tgid}
            ]
        )
        conn.execute(stmt)
        conn.commit()
        
        return f"‚ò∫Ô∏è –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name}!\n\n–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}"
        
def check_user(phone):
    with sync_engine.connect() as conn:
        stmt = select(users_table).where(users_table.c.userphone == phone)
        result = conn.execute(stmt).fetchone()
        
        if result:
            return True
        else:
            return False
        
def select_user_profile(tgid):
    with sync_engine.connect() as conn:
        stmt = select(users_table).where(users_table.c.usertgid == tgid)
        result = conn.execute(stmt).fetchone()
        
        if result:
            return f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüë©‚Äçü¶≥–õ–æ–≥–∏–Ω: {result[1]}\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: {result[2]}"
        else: 
            return f"–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!"
        
def delete_user(tgid):
    with sync_engine.connect() as conn:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(users_table).where(users_table.c.usertgid == tgid)
        result = conn.execute(stmt).fetchone()
        
        if result:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            delete_stmt = delete(users_table).where(users_table.c.usertgid == tgid)
            conn.execute(delete_stmt)
            conn.commit()
            
            return f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:\n\nüë©‚Äçü¶≥–õ–æ–≥–∏–Ω: {result[1]}\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: {result[2]}"
        else: 
            return f"–í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        
def select_users():
    with sync_engine.connect() as conn:
        # –ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏–∑ –ë–î
        stmt = select(users_table)
        result = conn.execute(stmt).fetchall()
        
        # –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = ""
        for row in result:
            user = f"–ò–º—è: {row[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {row[2]}\n\n"
            users_list += user
        return f"üìù–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n{users_list}"
    
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def select_users_order():
    with sync_engine.connect() as conn:
        stmt = select(users_table).order_by(users_table.c.username)
        result = conn.execute(stmt).fetchall()
        
        users_list = []
        for row in result:
            user = {
                "username": row[1],
                "userphone": row[2],
                "usertgid": row[3]
            }
            users_list.append(user)
        
        return users_list

# –°–æ–∑–¥–∞–¥–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def create_kb(user_list):
    inline_keyboard = []

    row = []
    for user in user_list:
        button = InlineKeyboardButton(text=user['username'], callback_data=str(user['usertgid']))
        row.append(button)
        
        if len(row) == 2:
            inline_keyboard.append(row)
            row = []
    if row:
        inline_keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

async def get_username_by_tgid(tgid: int) -> str:
    with sync_engine.connect() as conn:
        stmt = select(users_table).where(users_table.c.usertgid == tgid)
        result = conn.execute(stmt).fetchone()
        if result:
            return result[1]
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  
