from sqlalchemy import insert, select, delete, func
import pytz
from datetime import datetime, timedelta
import asyncio
from aiogram import Bot
from database.db import sync_engine
from database.models import metadata_obj, users_table, orders_table
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os

load_dotenv()

bot = Bot(token=os.getenv('BOT_TOKEN'))

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
def create_tables():
    metadata_obj.create_all(sync_engine)
    
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
def insert_user(name, phone, tgid):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    if check_user(phone):
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    
    with sync_engine.connect() as conn:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        stmt = insert(users_table).values(
            [
                {"username": name, "userphone": phone, "usertgid": tgid}
            ]
        )
        conn.execute(stmt)
        conn.commit()
        
        return f"‚ò∫Ô∏è –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è {name}!\n\n–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}"
        
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def check_user(phone):
    with sync_engine.connect() as conn:
        stmt = select(users_table).where(users_table.c.userphone == phone)
        result = conn.execute(stmt).fetchone()
        
        if result:
            return True
        else:
            return False
        
def check_order(time):
    with sync_engine.connect() as conn:
        stmt = select(orders_table).where(orders_table.c.client_time == time)
        result = conn.execute(stmt).fetchone()
        
        if result:
            return True
        else: 
            return False

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
def select_user_profile(tgid):
    with sync_engine.connect() as conn:
        stmt = select(users_table).where(users_table.c.usertgid == tgid)
        result = conn.execute(stmt).fetchone()
        
        if result:
            return f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\nüë§–õ–æ–≥–∏–Ω: {result[1]}\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: {result[2]}"
        else: 
            return f"–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!"

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user(tgid):
    with sync_engine.connect() as conn:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(users_table).where(users_table.c.usertgid == tgid)
        result = conn.execute(stmt).fetchone()
        
        if result:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            delete_stmt = delete(users_table).where(users_table.c.usertgid == tgid)
            conn.execute(delete_stmt)
            conn.commit()
            
            return f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:\n\nüë§–õ–æ–≥–∏–Ω: {result[1]}\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: {result[2]}"
        else: 
            return f"–í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
def select_users():
    with sync_engine.connect() as conn:
        # –ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏–∑ –ë–î
        stmt = select(users_table)
        result = conn.execute(stmt).fetchall()
        
        # –°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = ""
        for row in result:
            user = f"üë§–ò–º—è: <b>{row[1]}</b>\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: <b>{row[2]}</b>\n\n"
            users_list += user
        return f"üìù–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n{users_list}"
    
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def select_users_order():
    with sync_engine.connect() as conn:
        stmt = select(users_table).order_by(users_table.c.username)
        result = conn.execute(stmt).fetchall()
        
        users_list = []
        for row in result:
            user = {
                "username": row[1],
                "userphone": row[2],
                "usertgid": row[3]
            }
            users_list.append(user)
        
        return users_list

# –°–æ–∑–¥–∞–¥–∏–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def create_kb(user_list):
    inline_keyboard = []

    row = []
    for user in user_list:
        button = InlineKeyboardButton(text=user['username'], callback_data=str(user['usertgid']))
        row.append(button)
        
        if len(row) == 2:
            inline_keyboard.append(row)
            row = []
    if row:
        inline_keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tgid
async def get_username_by_tgid(tgid: int) -> str:
    with sync_engine.connect() as conn:
        stmt = select(users_table).where(users_table.c.usertgid == tgid)
        result = conn.execute(stmt).fetchone()
        if result:
            return result[1]
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  
        
async def get_userphone_by_tgid(tgid: int) -> str:
    with sync_engine.connect() as conn:
        stmt = select(users_table).where(users_table.c.usertgid == tgid)
        result = conn.execute(stmt).fetchone()
        if result:
            return result[2]
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  
        
# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
moscow_tz = pytz.timezone('Europe/Moscow')
# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def schedule_reminder(tgid, name, time, order_id):
    try:
        client_time_msk = moscow_tz.localize(datetime.strptime(time, '%d.%m.%Y %H:%M'))
        reminder_time_msk = client_time_msk - timedelta(days=1)
        reminder_time_msk = reminder_time_msk.replace(hour=10, minute=0, second=0, microsecond=0)

        now_msk = datetime.now(moscow_tz)

        if reminder_time_msk < now_msk:
            return

        delay = (reminder_time_msk - now_msk).total_seconds()
        await asyncio.sleep(delay)

        inline_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_reminder_{order_id}"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_reminder_{order_id}")
                ]
            ]
        )

        await bot.send_message(
            tgid,
            f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\nüìÖ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–∞ <b>{time}</b>.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è!üòä",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
async def insert_order(name, phone, tgid, time):
    if check_order(time):
        return "üò∂–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è"

    with sync_engine.connect() as conn:
        stmt = insert(orders_table).values(
            client_name=name, 
            client_phone=phone, 
            client_tgid=tgid, 
            client_time=time
        ).returning(orders_table.c.id)
        result = conn.execute(stmt)
        conn.commit()
        order_id = result.fetchone()[0]
        await bot.send_message(tgid, f"–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>!\nüìÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ <b>{time}</b>.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!üòä", parse_mode="HTML")
        asyncio.create_task(schedule_reminder(tgid, name, time, order_id))
        return f"ü•≥–û—Ç–ª–∏—á–Ω–æ!\n\n–í—ã –∑–∞–ø–∏—Å–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ \n<b>üë§{name}</b> \n–Ω–∞ <b>‚è∞{time}</b>"

# —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def delete_past_orders():
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with sync_engine.connect() as conn:
        stmt = delete(orders_table).where(
            func.to_timestamp(orders_table.c.client_time, 'DD.MM.YYYY HH24:MI') < func.to_timestamp(current_time, 'YYYY-MM-DD HH24:MI:SS')
        )
        conn.execute(stmt)
        conn.commit()
        
# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
def fetch_all_orders():
    with sync_engine.connect() as conn:
        stmt = select(orders_table.c.client_name, orders_table.c.client_phone, orders_table.c.client_time)
        result = conn.execute(stmt).fetchall()
        
        if not result:
            return "üò¥–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"

        formatted_results = []
        for row in result:
            formatted_results.append(f"üë§–ò–º—è: <b>{row[0]}</b>\nüìû–¢–µ–ª–µ—Ñ–æ–Ω: <b>{row[1]}</b>\n‚åöÔ∏è–í—Ä–µ–º—è: <b>{row[2]}</b>")
        
        return "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ\n<b>/delete –≤—Ä–µ–º—è</b>\n\n" + "\n\n".join(formatted_results)
    
# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def delete_order_by_time(time):
    with sync_engine.connect() as conn:
        stmt = delete(orders_table).where(orders_table.c.client_time == time)
        result = conn.execute(stmt)
        conn.commit()

        if result.rowcount > 0:
            return f"‚úÖ–ó–∞–ø–∏—Å—å –Ω–∞ –≤—Ä–µ–º—è <b>{time}</b> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        else:
            return f"‚ùå–ó–∞–ø–∏—Å—å –Ω–∞ –≤—Ä–µ–º—è {time} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ id       
def delete_order_by_id(order_id):
    with sync_engine.connect() as conn:
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ order_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
        order_id = int(order_id)
        stmt = delete(orders_table).where(orders_table.c.id == order_id)
        result = conn.execute(stmt)
        conn.commit()
        return result.rowcount > 0
    
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ –ø–æ id
def get_order_info_by_id(order_id):
    with sync_engine.connect() as conn:
        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ order_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
        order_id = int(order_id)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏
        select_stmt = select(orders_table.c.client_name, orders_table.c.client_time).where(orders_table.c.id == order_id)
        result = conn.execute(select_stmt).fetchone()
        
        return result
    
# –ü–æ–ª—É—á–µ–Ω–∏–µ tgid –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
def get_all_users():
    try:
        with sync_engine.connect() as conn:
            stmt = select(users_table.c.usertgid)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ tgid
            results = conn.execute(stmt).fetchall()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ tgid
            tgid_list = [row[0] for row in results]
            
            return tgid_list
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return []
    